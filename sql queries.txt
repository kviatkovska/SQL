--TESTS FOR MODULE 2

--2.1 
CREATE TABLE CUSTOMERS (ID INT PRIMARY KEY, 

  LASTNAME VARCHAR(30), 
  
  FIRSTNAME VARCHAR(30), 
  
  DATE_OFBIRTH DATE));

--2.2  
  ALTER TABLE CUSTOMERS ADD ADDRESS VARCHAR(100);

--2.3
CREATE TABLE ORDERS (ID INT PRIMARY KEY, 
  
  PRODUCT_NAME VARCHAR(30), 
  
  PRODUCT_PRICE FLOAT,

  DATE_ORDER DATE,

  ID_CUSTOMER INT);

--2.4
  ALTER TABLE ORDERS ADD AMOUNT INT;

--TESTS FOR MODULE 3

--3.1
  SELECT *
  FROM CUSTOMERS 
  ORDER BY ID;

--3.2  
  SELECT *
  FROM ORDERS
  ORDER BY PRODUCT_NAME ASC;

--3.3
  SELECT TOP 3 PRODUCT_NAME, DATE_ORDER
  FROM ORDERS
  ORDER BY DATE_ORDER;
  
--3.4
  SELECT DISTINCT ID_CUSTOMER
  FROM ORDERS
  WHERE PRODUCT_NAME = 'LAPTOP ASUS';

--3.5
  SELECT ID_CUSTOMER, DATE_ORDER
  FROM ORDERS
  WHERE AMOUNT > 2 
  ORDER BY DATE_ORDER;


--3.6
  SELECT *
  FROM ORDERS
  WHERE DATE_ORDER BETWEEN '2017' AND '2018'
  ORDER BY ID;
  
--3.7
  SELECT LASTNAME, FIRSTNAME
  FROM CUSTOMERS
  WHERE LASTNAME LIKE 'K%'
  ORDER BY ID;

--3.8
  SELECT LASTNAME, FIRSTNAME
  FROM CUSTOMERS
  WHERE LASTNAME LIKE '______'
  ORDER BY ID;

--3.9
  SELECT *
  FROM ORDERS
  WHERE NOT PRODUCT_NAME IN ('CAMERA CANON', 'LAPTOP ASUS');

--3.10
  SELECT LASTNAME
  FROM CUSTOMERS
  WHERE ADDRESS IS NOT NULL
  ORDER BY ID;

--3.11
  SELECT ID, PRODUCT_NAME, AMOUNT, PRODUCT_PRICE * AMOUNT
  FROM ORDERS;

--3.12
  SELECT *
  FROM ORDERS
  WHERE YEAR(DATE_ORDER) < 2017
  ORDER BY ID;
  
--TESTS FOR MODULE 4

--4.1
  ALTER TABLE ORDERS
  ADD FOREIGN KEY (ID_CUSTOMER)
  REFERENCES CUSTOMERS(ID)

--4.2
  SELECT PRODUCT_NAME, FIRSTNAME, LASTNAME
  FROM ORDERS FULL JOIN CUSTOMERS
  ON ORDERS.ID_CUSTOMER = CUSTOMERS.ID
  ORDER BY ORDERS.ID

--4.3
  SELECT PRODUCT_NAME, FIRSTNAME, LASTNAME, ADDRESS
  FROM ORDERS FULL JOIN CUSTOMERS
  ON ORDERS.ID_CUSTOMER = CUSTOMERS.ID
  WHERE ADDRESS IS NULL
  ORDER BY ORDERS.ID
  
--4.4
SELECT FIRSTNAME, LASTNAME, PRODUCT_NAME 
FROM CUSTOMERS LEFT JOIN ORDERS  
ON ORDERS.ID_CUSTOMER = CUSTOMERS.ID 
UNION ALL
SELECT PRODUCT_NAME 
FROM ORDERS 
WHERE ORDERS.ID_CUSTOMER IS NULL 
ORDER BY FIRSTNAME, LASTNAME, PRODUCT_NAME;

--4.5
  SELECT LASTNAME,
  (SELECT ID
  FROM ORDERS
  WHERE ID_CUSTOMER IS NULL) ID_CUST
  FROM CUSTOMERS;


--TESTS FOR MODULE 5

--5.1
  SELECT MAX(PRODUCT_PRICE) AS MAX_PRODUCT_PRICE
  FROM ORDERS

--5.2
  SELECT MAX(PRODUCT_PRICE) AS MAX_PRODUCT_PRICE, MIN(PRODUCT_PRICE) AS MIN_PRODUCT_PRICE
  FROM ORDERS
  WHERE DATE_ORDER BETWEEN '2017' AND '2018'

--5.3
  SELECT ROUND(AVG(PRODUCT_PRICE), 0) AS AVG_PRODUCT_PRICE 
  FROM ORDERS 

--5.4
  SELECT COUNT(*)
  FROM CUSTOMERS

--5.5
  SELECT SUM(PRODUCT_PRICE) AS SUM_PRICE
  FROM ORDERS

--5.6
  SELECT SUM(AMOUNT) AS SUM_AMOUNT
  FROM ORDERS

--5.7
  SELECT C.ID, PRODUCT_NAME
  FROM ORDERS JOIN CUSTOMERS C
  ON ID_CUSTOMER = C.ID
  WHERE 
  EXISTS (SELECT ID
  FROM CUSTOMERS
  WHERE ID_CUSTOMER=C.ID)

  SELECT PRODUCT_NAME,
  (SELECT COUNT(*)
  FROM CUSTOMERS
  WHERE ID_CUSTOMER = CUSTOMERS.ID) COUNT_CUST
  FROM ORDERS

--5.8
 SELECT PRODUCT_NAME, PRODUCT_PRICE,
  (SELECT COUNT(*)
  FROM CUSTOMERS
  WHERE ID_CUSTOMER = CUSTOMERS.ID) COUNT_CUST
  FROM ORDERS
  WHERE PRODUCT_PRICE < 1000


--5.9
 SELECT FIRSTNAME, LASTNAME, COUNT(ORDERS.ID) AS COUNT_ORD_ID
 FROM CUSTOMERS  LEFT JOIN ORDERS 
 ON ORDERS.ID_CUSTOMER = CUSTOMERS.ID 
 GROUP BY FIRSTNAME, LASTNAME, CUSTOMERS.ID 
 ORDER BY FIRSTNAME, LASTNAME;

--5.10
  SELECT FIRSTNAME, LASTNAME, SUM(ORDERS.PRODUCT_PRICE) AS TOTAL
  FROM CUSTOMERS  LEFT JOIN ORDERS 
   ON ORDERS.ID_CUSTOMER = CUSTOMERS.ID 
   GROUP BY FIRSTNAME, LASTNAME, CUSTOMERS.ID 
   ORDER BY FIRSTNAME, LASTNAME;


--TESTS FOR MODULE 6

--6.1
  SELECT MAX(PRODUCT_PRICE) AS MAX_PRODUCT_PRICE
  FROM ORDERS;

--6.2
  SELECT PRODUCT_NAME, PRODUCT_PRICE
  FROM ORDERS
  WHERE PRODUCT_PRICE = (SELECT MAX(PRODUCT_PRICE) FROM ORDERS)
  ORDER BY  PRODUCT_NAME;

--6.3
  SELECT PRODUCT_NAME, AMOUNT
  FROM ORDERS
  ORDER BY PRODUCT_NAME ASC;

--6.4
  SELECT PRODUCT_NAME, AVG(PRODUCT_PRICE) 
  FROM ORDERS  
  WHERE PRODUCT_NAME = 'LAPTOP ASUS' 
  GROUP BY PRODUCT_NAME;


--6.5
  SELECT LASTNAME, FIRSTNAME, PRODUCT_PRICE 
  FROM ORDERS JOIN CUSTOMERS C
  ON ID_CUSTOMER = C.ID
  WHERE PRODUCT_PRICE = (SELECT MAX(PRODUCT_PRICE) FROM ORDERS); 

--6.6
  SELECT LASTNAME, FIRSTNAME, PRODUCT_PRICE 
  FROM ORDERS JOIN CUSTOMERS C
  ON ID_CUSTOMER = C.ID
  WHERE PRODUCT_PRICE > (SELECT ROUND(AVG(PRODUCT_PRICE), 0) 
  FROM ORDERS)
  ORDER BY LASTNAME, FIRSTNAME;
--6.7
SELECT FIRSTNAME, LASTNAME, AMOUNT 
FROM CUSTOMERS LEFT JOIN ORDERS 
ON ORDERS.ID_CUSTOMER = CUSTOMERS.ID 
WHERE AMOUNT = (SELECT MAX(AMOUNT) FROM ORDERS)
ORDER BY FIRSTNAME, LASTNAME;

--6.8
  SELECT LASTNAME, FIRSTNAME, PRODUCT_PRICE 
  FROM ORDERS JOIN CUSTOMERS C
  ON ID_CUSTOMER = C.ID
  WHERE PRODUCT_PRICE IS NULL

--6.9
 SELECT PRODUCT_NAME, SUM(AMOUNT)
FROM ORDERS 
GROUP BY PRODUCT_NAME
HAVING COUNT(ID_CUSTOMER) > 1 
ORDER BY PRODUCT_NAME;

 
--6.10
SELECT FIRSTNAME, LASTNAME, COUNT(ORDERS.ID) AS COUNT_ID
FROM CUSTOMERS LEFT JOIN ORDERS 
ON ORDERS.ID_CUSTOMER = CUSTOMERS.ID 
GROUP BY FIRSTNAME, LASTNAME, CUSTOMERS.ID 
ORDER BY LASTNAME;


--TESTS FOR MODULE 7
--7.1
    INSERT INTO CUSTOMERS (ID, LASTNAME, FIRSTNAME, DATE_OFBIRTH, ADDRESS)
	VALUES (11, 'Volodumyr', 'Ilnytski', '07/09/1979', 'Vyshnevskogo, 13')
		
    INSERT INTO CUSTOMERS (ID, LASTNAME, FIRSTNAME, DATE_OFBIRTH, ADDRESS)
	VALUES (12, 'Roman', 'Petryk', '05/02/1983', 'Stepanenka, 82')

--7.2
    INSERT INTO ORDERS (ID, PRODUCT_NAME, PRODUCT_PRICE, DATE_ORDER, ID_CUSTOMER, AMOUNT) 
	 VALUES(15, 'Dell Inspiron 3542', 6750, '2016/12/21', 8, 2);
    
	
	INSERT INTO ORDERS (ID, PRODUCT_NAME, PRODUCT_PRICE, DATE_ORDER, ID_CUSTOMER, AMOUNT) 
	VALUES(16, 'Asus X553MA', 6300, '2016-12-22', (SELECT ID 
	FROM CUSTOMERS 
	WHERE FIRSTNAME = 'Roman' AND LASTNAME = 'Petryk'), 3);


--7.3
    UPDATE ORDERS SET AMOUNT = 5 WHERE ID = 14;
    
	UPDATE ORDERS SET PRODUCT_PRICE = PRODUCT_PRICE + PRODUCT_PRICE * 0.1 WHERE ID = 15;

--7.4
    DELETE FROM ORDERS WHERE ID = 13;
